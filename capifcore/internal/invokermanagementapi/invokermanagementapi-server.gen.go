// Package invokermanagementapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package invokermanagementapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common29571"
	externalRef2 "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /getAllInvoker)
	GetGetAllInvoker(ctx echo.Context) error

	// (POST /onboardedInvokers)
	PostOnboardedInvokers(ctx echo.Context) error

	// (DELETE /onboardedInvokers/{onboardingId})
	DeleteOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error

	// (PATCH /onboardedInvokers/{onboardingId})
	ModifyIndApiInvokeEnrolment(ctx echo.Context, onboardingId string) error

	// (PUT /onboardedInvokers/{onboardingId})
	PutOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error

	// (POST /register)
	PostRegister(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGetAllInvoker converts echo context to params.
func (w *ServerInterfaceWrapper) GetGetAllInvoker(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGetAllInvoker(ctx)
	return err
}

// PostOnboardedInvokers converts echo context to params.
func (w *ServerInterfaceWrapper) PostOnboardedInvokers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOnboardedInvokers(ctx)
	return err
}

// DeleteOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// ModifyIndApiInvokeEnrolment converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyIndApiInvokeEnrolment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyIndApiInvokeEnrolment(ctx, onboardingId)
	return err
}

// PutOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) PutOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/getAllInvoker", wrapper.GetGetAllInvoker)
	router.POST(baseURL+"/onboardedInvokers", wrapper.PostOnboardedInvokers)
	router.DELETE(baseURL+"/onboardedInvokers/:onboardingId", wrapper.DeleteOnboardedInvokersOnboardingId)
	router.PATCH(baseURL+"/onboardedInvokers/:onboardingId", wrapper.ModifyIndApiInvokeEnrolment)
	router.PUT(baseURL+"/onboardedInvokers/:onboardingId", wrapper.PutOnboardedInvokersOnboardingId)
	router.POST(baseURL+"/register", wrapper.PostRegister)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
