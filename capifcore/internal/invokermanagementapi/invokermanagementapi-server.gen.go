// Package invokermanagementapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package invokermanagementapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common29571"
	externalRef2 "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of API Invokers
	// (GET /invokerList)
	GetInvokerList(ctx echo.Context) error

	// (POST /onboardedInvokers)
	PostOnboardedInvokers(ctx echo.Context) error

	// (DELETE /onboardedInvokers/{onboardingId})
	DeleteOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error

	// (PATCH /onboardedInvokers/{onboardingId})
	ModifyIndApiInvokeEnrolment(ctx echo.Context, onboardingId string) error

	// (PUT /onboardedInvokers/{onboardingId})
	PutOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInvokerList converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvokerList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvokerList(ctx)
	return err
}

// PostOnboardedInvokers converts echo context to params.
func (w *ServerInterfaceWrapper) PostOnboardedInvokers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOnboardedInvokers(ctx)
	return err
}

// DeleteOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// ModifyIndApiInvokeEnrolment converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyIndApiInvokeEnrolment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyIndApiInvokeEnrolment(ctx, onboardingId)
	return err
}

// PutOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) PutOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/invokerList", wrapper.GetInvokerList)
	router.POST(baseURL+"/onboardedInvokers", wrapper.PostOnboardedInvokers)
	router.DELETE(baseURL+"/onboardedInvokers/:onboardingId", wrapper.DeleteOnboardedInvokersOnboardingId)
	router.PATCH(baseURL+"/onboardedInvokers/:onboardingId", wrapper.ModifyIndApiInvokeEnrolment)
	router.PUT(baseURL+"/onboardedInvokers/:onboardingId", wrapper.PutOnboardedInvokersOnboardingId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"E20zAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
