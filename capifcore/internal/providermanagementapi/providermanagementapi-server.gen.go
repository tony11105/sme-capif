// Package providermanagementapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package providermanagementapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common29571"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /getAllRegistrations)
	GetGetAllRegistrations(ctx echo.Context) error

	// (POST /registrations)
	PostRegistrations(ctx echo.Context) error

	// (DELETE /registrations/{registrationId})
	DeleteRegistrationsRegistrationId(ctx echo.Context, registrationId string) error

	// (PATCH /registrations/{registrationId})
	ModifyIndApiProviderEnrolment(ctx echo.Context, registrationId string) error

	// (PUT /registrations/{registrationId})
	PutRegistrationsRegistrationId(ctx echo.Context, registrationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGetAllRegistrations converts echo context to params.
func (w *ServerInterfaceWrapper) GetGetAllRegistrations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGetAllRegistrations(ctx)
	return err
}

// PostRegistrations converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegistrations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegistrations(ctx)
	return err
}

// DeleteRegistrationsRegistrationId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegistrationsRegistrationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "registrationId" -------------
	var registrationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "registrationId", runtime.ParamLocationPath, ctx.Param("registrationId"), &registrationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter registrationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRegistrationsRegistrationId(ctx, registrationId)
	return err
}

// ModifyIndApiProviderEnrolment converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyIndApiProviderEnrolment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "registrationId" -------------
	var registrationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "registrationId", runtime.ParamLocationPath, ctx.Param("registrationId"), &registrationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter registrationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyIndApiProviderEnrolment(ctx, registrationId)
	return err
}

// PutRegistrationsRegistrationId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegistrationsRegistrationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "registrationId" -------------
	var registrationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "registrationId", runtime.ParamLocationPath, ctx.Param("registrationId"), &registrationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter registrationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRegistrationsRegistrationId(ctx, registrationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/getAllRegistrations", wrapper.GetGetAllRegistrations)
	router.POST(baseURL+"/registrations", wrapper.PostRegistrations)
	router.DELETE(baseURL+"/registrations/:registrationId", wrapper.DeleteRegistrationsRegistrationId)
	router.PATCH(baseURL+"/registrations/:registrationId", wrapper.ModifyIndApiProviderEnrolment)
	router.PUT(baseURL+"/registrations/:registrationId", wrapper.PutRegistrationsRegistrationId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
