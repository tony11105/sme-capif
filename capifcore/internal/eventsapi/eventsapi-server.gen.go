// Package eventsapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package eventsapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/accesscontrolpolicyapi"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common"
	externalRef2 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef3 "oransc.org/nonrtric/capifcore/internal/common29571"
	externalRef4 "oransc.org/nonrtric/capifcore/internal/loggingapi"
	externalRef5 "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
	externalRef6 "oransc.org/nonrtric/capifcore/internal/routinginfoapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /getAllSubscriptions)
	GetGetAllSubscriptions(ctx echo.Context) error

	// (POST /{subscriberId}/subscriptions)
	PostSubscriberIdSubscriptions(ctx echo.Context, subscriberId string) error

	// (DELETE /{subscriberId}/subscriptions/{subscriptionId})
	DeleteSubscriberIdSubscriptionsSubscriptionId(ctx echo.Context, subscriberId string, subscriptionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGetAllSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetGetAllSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGetAllSubscriptions(ctx)
	return err
}

// PostSubscriberIdSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriberIdSubscriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriberId" -------------
	var subscriberId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriberId", runtime.ParamLocationPath, ctx.Param("subscriberId"), &subscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriberId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSubscriberIdSubscriptions(ctx, subscriberId)
	return err
}

// DeleteSubscriberIdSubscriptionsSubscriptionId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscriberIdSubscriptionsSubscriptionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriberId" -------------
	var subscriberId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriberId", runtime.ParamLocationPath, ctx.Param("subscriberId"), &subscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriberId: %s", err))
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, ctx.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriptionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubscriberIdSubscriptionsSubscriptionId(ctx, subscriberId, subscriptionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/getAllSubscriptions", wrapper.GetGetAllSubscriptions)
	router.POST(baseURL+"/:subscriberId/subscriptions", wrapper.PostSubscriberIdSubscriptions)
	router.DELETE(baseURL+"/:subscriberId/subscriptions/:subscriptionId", wrapper.DeleteSubscriberIdSubscriptionsSubscriptionId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P1voX5pycbg8NdLebf8VAAD//2pI1A8zKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Access_Control_Policy_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef4.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Logging_API_Invocation_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef5.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef6.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Routing_Info_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
